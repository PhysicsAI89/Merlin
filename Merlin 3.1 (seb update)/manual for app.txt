Merlin — Multi-Asset ML
User Manual (BTC/ETH/FX/Oil/Equities, Daily/Weekly)

0) Quick start (TL;DR)
Open the app

Double-click Run Merlin UI.bat (in Merlin 2.0\app) or

PowerShell:

powershell
Copy
Edit
cd "C:\Users\<you>\OneDrive\Documents\Merlin\Merlin 2.0\app"
streamlit run ui_app.py
(Optional) Enter your Alpha Vantage key in the sidebar if you want news or equity fetch via AV.

Load data

For crypto/FX/oil/equities (Yahoo Finance):
Click Fetch latest (YF) for this asset (or Fetch ALL enabled (YF)).

For equities (Alpha Vantage): click Fetch latest equity data (AV) (needs API key).

Choose: Asset → Frequency (D/W) → Horizon → Model.

Train → hit Train.

Predict → (optionally tick Save prediction) → Predict next.

Backtest → set Buy threshold, Hold steps, Retrain every k steps → Backtest strategy.

1) What the main controls do
Asset
Pick from your enabled symbols (e.g., BTC-USD, ETH-USD, GBPUSD=X, CL=F, VOD).

Frequency (D/W)
D = daily bars.

W = weekly bars (Fri close aggregation).
Backtests, training and prediction respect this choice.

Horizon (steps ahead)
“How far into the future to predict an UP close.”

D + H=1: “Will it close up tomorrow?”

D + H=3: “…in 3 trading days?”

W + H=1: “Up next week?”
Longer horizons = fewer samples & more uncertainty. Start with 1.

Model
gb – Gradient Boosting (fast, great baseline).

rf – Random Forest (multi-core; robust).

xgb – XGBoost (usually strongest; can use GPU if configured).

Speed tip: for quick iteration use gb. Use xgb when you’ve set up GPU or want max accuracy.

Use news sentiment (checkbox)
Adds rolling news features (via Alpha Vantage NEWS_SENTIMENT) before training/predicting.

Needs a valid ALPHA_VANTAGE_API_KEY in the sidebar.

Works better for equities; for crypto/FX/oil it’s often sparse/rate-limited.
TL;DR: Off for BTC/ETH/FX/Oil; try it for large equities.

2) Fetching data
Yahoo Finance (recommended for crypto/FX/oil; works for equities too)
Fetch latest (YF) for this asset – updates the currently selected symbol.

Fetch ALL enabled (YF) – refreshes everything that’s enabled in your DB.

Alpha Vantage (equities only)
Fetch latest equity data (AV) – daily OHLCV via AV. Requires API key. Rate-limited.

First-time bulk ingest (optional)
In the “Ingest (yfinance)” expander we show a CLI you can run in PowerShell to load multiple symbols at once:

powershell
Copy
Edit
python -m flask --app app ingest yf --symbols "BTC-USD,ETH-USD,GBPUSD=X,CL=F"
3) Training
Click Train. You’ll see a toast like:

yaml
Copy
Edit
Trained BTC-USD — XGB_D_H1  ROC AUC: 0.533  (1804 samples)
ROC AUC is cross-validation quality (higher is better; 0.5 ≈ random).

The model is saved to app\artifacts\<symbol>_<MODEL>_<FREQ>_H<h>.joblib.

4) Prediction
(Optional) tick Save prediction → the result is written to the DB table stock_prediction.

Click Predict next → we compute Pr(up), the probability the close at t + horizon is above the close at t.

Example: Pr(up) = 0.496 → ~49.6% (basically neutral).

With a Buy threshold of 0.60 this would not trigger a trade.

Where do saved predictions go?
They’re inserted into stock_prediction (symbol, price_date, target_date, pred_value, model).

In the UI you should see a Recent predictions table (last ~50 by default).
If you don’t see it, we can add it below the chart (just shout).

5) Backtesting
Click Backtest strategy. Three knobs control the run:

Buy threshold (prob) – only “buy” when the model’s probability ≥ threshold.
Lower = more trades (noisier), Higher = fewer trades (usually cleaner).

Hold steps – number of bars to hold after a buy.

Retrain every k steps – for walk-forward speed: refit every k bars instead of every bar.

For quick tests: use 5–20.

For accuracy: smaller numbers (1–5) but slower.

Output:

Trades – count of entries generated by the threshold.

Hit rate – share of winning trades.

Final equity – compounded equity multiple; e.g., 1.04× means +4%.

Table (below the headline):

date – entry date.

proba – model probability at entry.

rtn – realised return over the horizon from that entry.

Small-sample warning: If you only see a handful of trades, results aren’t reliable. Loosen the threshold, use Daily, or extend your history.

6) Chart
At the bottom you’ll see the selected asset’s close series (Daily or Weekly, by your Frequency).

7) Good defaults & tips
Start: Frequency = D, Horizon = 1, Model = gb, Use news = off, Threshold = 0.60, Hold = 1, Retrain every = 10.

Speed: use gb; or xgb with GPU. For backtest speed, increase Retrain every k steps.

Coverage: Yahoo works for most symbols. AV is great for equities but rate-limited.

Symbols cheat sheet

BTC-USD – Bitcoin/USD (crypto).

ETH-USD – Ethereum/USD.

GBPUSD=X – GBP/USD FX spot (the =X is a Yahoo forex suffix).

CL=F – WTI crude front-month futures (the =F is a futures suffix).

VOD – Vodafone ADR in the US. For London use VOD.L.

8) Making it faster (optional)
You can tweak environment variables before launching the app.

CPU parallelism & faster CV
powershell
Copy
Edit
$env:MERLIN_TS_SPLITS = "3"   # Cross-val splits (smaller = faster; default 3)
$env:MERLIN_N_JOBS   = "-1"   # Use all CPU cores where relevant (RF)
Enable GPU for XGBoost (if you’ve installed CUDA-enabled xgboost)
powershell
Copy
Edit
$env:MERLIN_USE_GPU = "1"
In Model pick xgb.

You should see GPU usage in Task Manager/NZXT when training/predicting with xgb.

If xgboost isn’t installed with GPU support, we’ll silently use CPU hist instead.

9) Troubleshooting
“No price data yet”

Click a Fetch button for the asset.

Ensure the symbol exists in your Stock table (enabled).

“No data returned (symbol might not be an equity, or rate-limited)”

You used AV for a non-equity or you hit the AV rate limit.

Use YF buttons for crypto/FX/oil, or wait a minute and try again.

Backtests are slow

Increase Retrain every k steps (e.g., 10 or 20).

Use gb model.

Lower Horizon.

Set MERLIN_TS_SPLITS = 2 temporarily.

GPU isn’t used

Make sure Model = xgb and MERLIN_USE_GPU=1.

Confirm your xgboost build supports CUDA.

Probabilities look “all 0.5-ish”

Try rf or xgb, add more history, or include news (for equities).

Revisit features/threshold. AUC around ~0.5 means the pattern is weak.

10) Interpreting results (cheat sheet)
Pr(up) = 0.496 → ~50/50; not a buy if your threshold is 0.60.

Trades: 4 | Hit rate: 0.50 | Final equity: 1.04× → 4 trades, half winners, +4% equity.
(Final equity = ∏(1 + rtnᵢ) over trades.)

11) Nice upgrades you can add later
Equity curve plot for backtests.

Sharpe / Max Drawdown.

Probability calibration and reliability charts.

Auto-ingest scheduler (daily).

Model registry with versioning & notes.